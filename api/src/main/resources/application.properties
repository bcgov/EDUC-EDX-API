$=$
#logging Properties
logging.level.org.springframework.security=${SPRING_SECURITY_LOG_LEVEL}
logging.level.org.springframework.web=${SPRING_WEB_LOG_LEVEL}
logging.level.ca.bc.gov.educ.api.edx=${APP_LOG_LEVEL}
logging.level.org.springframework.boot.autoconfigure.logging=${SPRING_BOOT_AUTOCONFIG_LOG_LEVEL}
spring.mvc.log-request-details=${SPRING_SHOW_REQUEST_DETAILS}
#DB Properties
spring.datasource.url=${JDBC_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none
#So that unexpected requestbody parameters cause error
spring.jackson.deserialization.fail-on-unknown-properties=true
management.endpoint.metrics.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.prometheus.enabled=true
management.prometheus.metrics.export.enabled=true
spring.jpa.properties.hibernate.generate_statistics=${HIBERNATE_STATISTICS}
spring.jmx.enabled=false
spring.jpa.show-sql=${SPRING_SHOW_SQL}
#File Upload Requirement properties
file.maxsize=${FILE_MAXSIZE}
file.maxEncodedSize=${FILE_MAX_ENCODED_SIZE}
file.extensions=${FILE_EXTENSIONS}
roles.allow.list=${ROLES_ALLOW_LIST}
bcsc.auto.match.outcomes=${BCSC_AUTO_MATCH_OUTCOMES}
spring.datasource.hikari.max-lifetime=120000
spring.flyway.baseline-on-migrate=true
spring.flyway.table=flyway_schema_history
spring.flyway.baseline-version=1.0.0
spring.flyway.enabled=true
spring.security.oauth2.resourceserver.jwt.issuer-uri=${TOKEN_ISSUER_URL}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${TOKEN_ISSUER_URL}/protocol/openid-connect/certs
logging.file.name=/logs/app.log
logging.logback.rollingpolicy.max-file-size=5MB
logging.logback.rollingpolicy.clean-history-on-start=true
logging.logback.rollingpolicy.max-history=1
logging.pattern.file={"time_stamp":"%d{yyyy-MM-dd HH:mm:ss.SSS}","level":"%3p" ,"thread":"%t" ,"class":"%logger{36}","msg":"%replace(%msg){'[\n\r\"]',''}", "exception":"%replace(%rEx{10}){'[\n\r\"]',''}","http_event":%X{httpEvent:-""},"message_event":%X{messageEvent:-""}}%nopex%n
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} | [%5p] | [%t] | [%logger{36}] | [%replace(%msg){'[\n\r\"]',''} %X{httpEvent} %X{messageEvent}] | %replace(%rEx{10}){'[\n\r\"]',''}%nopex%n
server.undertow.threads.io=16
server.undertow.threads.worker=128
remove.blob.contents.document.after.days=${REMOVE_BLOB_CONTENTS_DOCUMENT_AFTER_DAYS}
scheduled.jobs.remove.blob.contents.document.cron=${SCHEDULED_JOBS_REMOVE_BLOB_CONTENTS_DOCUMENT_CRON}
scheduled.jobs.purge.closed.messages.cron=${SCHEDULED_JOBS_PURGE_CLOSED_MESSAGES_CRON}
purge.closed.message.after.days=${PURGE_CLOSED_SECURE_EXCHANGE_AFTER_DAYS}
spring.servlet.multipart.max-request-size=20485760
spring.servlet.multipart.max-file-size=20485760
#Nats Config
nats.server=${NATS_URL}
nats.maxReconnect=${NATS_MAX_RECONNECT}
nats.connectionName=EDUC-EDX-API
#CHES Properties
ches.client.id=${CHES_CLIENT_ID}
ches.client.secret=${CHES_CLIENT_SECRET}
ches.token.url=${CHES_TOKEN_URL}
ches.endpoint.url=${CHES_ENDPOINT_URL}
notification.email.switch.on=${NOTIFICATION_EMAIL_SWITCH_ON}

#Email Templates
email.subject.edx.school.primary-code.notification=${EMAIL_SUBJECT_EDX_SCHOOL_PRIMARY_CODE_NOTIFICATION}
email.template.edx.school.primary-code.notification=${EMAIL_TEMPLATE_EDX_SCHOOL_PRIMARY_CODE_NOTIFICATION}

email.template.edx.district.primary-code.notification=${EMAIL_TEMPLATE_EDX_DISTRICT_PRIMARY_CODE_NOTIFICATION}

email.template.edx.school.user.activation.invite=${EMAIL_TEMPLATE_EDX_SCHOOL_USER_ACTIVATION_INVITE}
email.subject.edx.school.user.activation.invite=${EMAIL_SUBJECT_EDX_SCHOOL_USER_ACTIVATION_INVITE}
email.from.edx.school.user.activation.invite=${EMAIL_FROM_EDX_SCHOOL_USER_ACTIVATION_INVITE}

email.template.edx.district.user.activation.invite=${EMAIL_TEMPLATE_EDX_DISTRICT_USER_ACTIVATION_INVITE}

email.template.edx.new.secure.exchange.notification=${EMAIL_TEMPLATE_EDX_NEW_SECURE_EXCHANGE_NOTIFICATION}
email.subject.edx.new.secure.exchange.notification=${EMAIL_SUBJECT_EDX_NEW_SECURE_EXCHANGE_NOTIFICATION}

email.template.edx.secure.exchange.comment.notification=${EMAIL_TEMPLATE_EDX_SECURE_EXCHANGE_COMMENT_NOTIFICATION}
email.subject.edx.secure.exchange.comment.notification=${EMAIL_SUBJECT_EDX_SECURE_EXCHANGE_COMMENT_NOTIFICATION}

#EdxSchoolUserActivationInvite
edx.school.user.activation.invite.base.url=${SITE_URL}
edx.school.user.activation.invite.append.url =${EDX_SCHOOL_USER_ACTIVATION_INVITE_URL_APPEND}
edx.school.user.activation.invite.validity.hours=${EDX_SCHOOL_USER_ACTIVATION_INVITE_VALIDITY_HOURS}

scheduled.jobs.extract.uncompleted.sagas.cron=${SCHEDULED_JOBS_EXTRACT_UNCOMPLETED_SAGAS_CRON}
scheduled.jobs.extract.uncompleted.sagas.cron.lockAtLeastFor=${SCHEDULED_JOBS_EXTRACT_UNCOMPLETED_SAGAS_CRON_LOCK_AT_LEAST_FOR}
scheduled.jobs.extract.uncompleted.sagas.cron.lockAtMostFor=${SCHEDULED_JOBS_EXTRACT_UNCOMPLETED_SAGAS_CRON_LOCK_AT_MOST_FOR}

#Webclient configuration
spring.security.oauth2.client.registration.edxapi.client-id=${EDX_API_CLIENT_ID}
spring.security.oauth2.client.registration.edxapi.client-secret=${EDX_API_CLIENT_SECRET}
spring.security.oauth2.client.registration.edxapi.authorization-grant-type=client_credentials
spring.security.oauth2.client.provider.edxapi.issuer-uri=${TOKEN_ISSUER_URL}
spring.security.oauth2.client.provider.edxapi.token-uri=${TOKEN_ISSUER_URL}/protocol/openid-connect/token

apis.endpoints.student.api=${STUDENT_API_ENDPOINT}
institute.api.url=${INSTITUTE_API_ENDPOINT}

spring.jpa.properties.hibernate.jdbc.batch_size=999
spring.jpa.properties.hibernate.order_inserts=true
spring.datasource.hikari.data-source-properties.reWriteBatchedInserts=true
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=10

#EDX Activation Code Parameters
edx.activation.code.length=${EDX_ACTIVATION_CODE_LENGTH}
edx.activation.code.valid.characters=${EDX_ACTIVATION_CODE_VALID_CHARACTERS}

scheduled.jobs.update.user.role.for.closed.school.cron=${SCHEDULED_JOBS_UPDATE_USER_ROLE_FOR_CLOSED_SCHOOL_CRON}
scheduled.jobs.update.user.role.for.closed.school.cron.lockAtLeastFor=${SCHEDULED_JOBS_UPDATE_USER_ROLE_FOR_CLOSED_SCHOOL_CRON_LOCK_AT_LEAST_FOR}
scheduled.jobs.update.user.role.for.closed.school.cron.lockAtMostFor=${SCHEDULED_JOBS_UPDATE_USER_ROLE_FOR_CLOSED_SCHOOL_CRON_LOCK_AT_MOST_FOR}
